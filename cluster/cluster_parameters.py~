# -*- coding: cp1252 -*-
"""
Description: 
Challenge CAMELYON16.
This file contains Peter's parameters for script_classification.py. 

Authors:  Vaïa Machairas, Etienne Decencière, Peter Naylor, Thomas Walter.

Creation date: 2016-02-24
"""
import os
import pdb
from getpass import getuser

import sklearn.ensemble as ens

import segm_db_access as sdba
import useful_functions as uf
import spp_functors as spp
import op_functors as op
import general_feature_for_pixel_support as pf
#import cytomine_window as cw
import op_functors_geodesic as og
import general_feature_for_SP_support as gf
import general_feature_for_SP_support_geodesic as geo
##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CROSS_VALIDATION = True
LEARNING = False
PREDICTION = LEARNING
EVALUATION = False

##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## on a besoin du chemin d'accès de la base: base_path
base = "CAMELYON_1"

## morphomath
size_se = 5
neighborhood_se = 'V4'
##lbp
radius_lpb = 2
points_lbp = 8

## Window
size_w = 20
neighborhood_w = 'V8'
## SAF waterpixels
wp1 = spp.WaterpixelsFunctor({"step":40, "k":4, "filter_ori":True})
spp_functor = wp1
integrator_saf = 'mean'
wp2 = spp.WaterpixelsFunctor({"step":30, "k":4, "filter_ori":True}) ## garder un step de petite taille (<=30) pour limiter temps de calcul (Haralick et LBP)
spp_functor2= wp2

###--------###--------###--------###--------###--------###--------###--------
## List of features:
pixel_features_list = [

### Pixel
pf.GeneralFeature(op.IdentityFunctor({}), [0, 1, 2]), 
pf.GeneralFeature(op.ErosionFunctor({'neighborhood':neighborhood_se, 'size':size_se}), [0, 1, 2]), 
pf.GeneralFeature(op.DilationFunctor({'neighborhood':neighborhood_se, 'size':size_se}), [0, 1, 2]),
pf.GeneralFeature(op.OpeningFunctor({'neighborhood':neighborhood_se, 'size':size_se}), [0, 1, 2]),
pf.GeneralFeature(op.ClosingFunctor({'neighborhood':neighborhood_se, 'size':size_se}), [0, 1, 2]),
pf.GeneralFeature(op.TopHatFunctor({'neighborhood':neighborhood_se, 'size':size_se}), [0, 1, 2]),
pf.GeneralFeature(op.MorphologicalGradientFunctor({'neighborhood':neighborhood_se, 'size':size_se}), [0, 1, 2]),

### Window
pf.GeneralFeature(op.IdentityFunctorW({'neighborhood':neighborhood_se, 'size':size_se, 'window_size': size_w}), [0, 1, 2]), 
pf.GeneralFeature(op.ErosionFunctorW({'neighborhood':neighborhood_se, 'size':size_se, 'window_size': size_w}), [0, 1, 2]), 
pf.GeneralFeature(op.DilationFunctorW({'neighborhood':neighborhood_se, 'size':size_se, 'window_size': size_w}), [0, 1, 2]),
pf.GeneralFeature(op.OpeningFunctorW({'neighborhood':neighborhood_se, 'size':size_se, 'window_size': size_w}), [0, 1, 2]),
pf.GeneralFeature(op.ClosingFunctorW({'neighborhood':neighborhood_se, 'size':size_se, 'window_size': size_w}), [0, 1, 2]),
pf.GeneralFeature(op.TopHatFunctorW({'neighborhood':neighborhood_se, 'size':size_se, 'window_size': size_w}), [0, 1, 2]),
pf.GeneralFeature(op.MorphologicalGradientFunctorW({'neighborhood':neighborhood_se, 'size':size_se, 'window_size': size_w}), [0, 1, 2]),

### SAF: waterpixels
gf.GeneralFeature(op.IdentityFunctor({}), [0, 1, 2],  integrator_saf,  spp_functor, 'pixel'), 
geo.GeneralFeatureGeodesic(og.GeodesicErosionFunctor({'neighborhood':neighborhood_se, 'size':size_se,  'integrator': integrator_saf}),  [0, 1, 2],  spp_functor,  'pixel'), 
geo.GeneralFeatureGeodesic(og.GeodesicDilationFunctor({'neighborhood':neighborhood_se, 'size':size_se,  'integrator': integrator_saf}),  [0, 1, 2],  spp_functor,  'pixel'), 
geo.GeneralFeatureGeodesic(og.GeodesicOpeningFunctor({'neighborhood':neighborhood_se, 'size':size_se,  'integrator': integrator_saf}),  [0, 1, 2],  spp_functor,  'pixel'), 
geo.GeneralFeatureGeodesic(og.GeodesicClosingFunctor({'neighborhood':neighborhood_se, 'size':size_se,  'integrator': integrator_saf}),  [0, 1, 2],  spp_functor,  'pixel'), 
geo.GeneralFeatureGeodesic(og.GeodesicMorphoGradientFunctor({'neighborhood':neighborhood_se, 'size':size_se,  'integrator': integrator_saf}),  [0, 1, 2],  spp_functor,  'pixel'), 
geo.GeneralFeatureGeodesic(og.GeodesicTopHatFunctor({'neighborhood':neighborhood_se, 'size':size_se,  'integrator': integrator_saf}),  [0, 1, 2],  spp_functor,  'pixel'), 
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'AngularSecondMoment'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'Contrast'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'Correlation'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'SumofSquaresVariance'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'InverseDifferenceMoment'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'SumAverage'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'SumVariance'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'SumEntropy'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'Entropy'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'DifferenceVariance'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'DifferenceEntropy'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'InformationMeasureofCorrelation1'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.HaralickFeature({'direction': 'all',  'feature_name': 'InformationMeasureofCorrelation2'}), [0, 1, 2],  spp_functor2, 'pixel'),
geo.GeneralFeatureGeodesic(og.LBP_bin1({'radius': radius_lpb,  'points': points_lbp, 'ignore_zeros': True,  'preserve_shape': False}),  [0, 1, 2],  spp_functor2,  'pixel'), 
geo.GeneralFeatureGeodesic(og.LBP_bin2({'radius': radius_lpb,  'points': points_lbp, 'ignore_zeros': True,  'preserve_shape': False}),  [0, 1, 2],  spp_functor2,  'pixel'), 
geo.GeneralFeatureGeodesic(og.LBP_bin3({'radius': radius_lpb,  'points': points_lbp, 'ignore_zeros': True,  'preserve_shape': False}),  [0, 1, 2],  spp_functor2,  'pixel'), 
geo.GeneralFeatureGeodesic(og.LBP_bin4({'radius': radius_lpb,  'points': points_lbp, 'ignore_zeros': True,  'preserve_shape': False}),  [0, 1, 2],  spp_functor2,  'pixel'), 
geo.GeneralFeatureGeodesic(og.LBP_bin5({'radius': radius_lpb,  'points': points_lbp, 'ignore_zeros': True,  'preserve_shape': False}),  [0, 1, 2],  spp_functor2,  'pixel'), 
geo.GeneralFeatureGeodesic(og.LBP_bin6({'radius': radius_lpb,  'points': points_lbp, 'ignore_zeros': True,  'preserve_shape': False}),  [0, 1, 2],  spp_functor2,  'pixel')

]



for sigma in [0.7, 1, 1.6, 3.5, 5, 10]:

	GS = gf.GeneralFeature(op.IlastikGaussianSmoothing({'sigma':sigma}), [0, 1, 2],  'mean',  wp1, 'pixel')
	LoG = gf.GeneralFeature(op.IlastikLaplacianOfGaussian({'scale':sigma}), [0, 1, 2],  'mean',  wp1, 'pixel') 
    GGM = gf.GeneralFeature(op.IlastikGaussianGradientMagnitude({'sigma':sigma}), [0, 1, 2],  'mean',  wp1, 'pixel')
	DoG = gf.GeneralFeature(op.IlastikDifferenceOfGaussians({'sigma1':sigma * np.sqrt(2),  'sigma2':sigma / np.sqrt(2)}), [0, 1, 2],  'mean',  wp1, 'pixel')
	ST1 = gf.GeneralFeature(op.IlastikStructureTensorEigenValues({'innerScale':sigma,  'outerScale':2,  'eigenvalueNumber': 0}), [0, 1, 2],  'mean',  wp1, 'pixel') 
	ST2 = gf.GeneralFeature(op.IlastikStructureTensorEigenValues({'innerScale':sigma,  'outerScale':2,  'eigenvalueNumber': 1}), [0, 1, 2],  'mean',  wp1, 'pixel'), 
	HG1 = gf.GeneralFeature(op.IlastikHessianOfGaussianEigenvalues({'scale':sigma, 'eigenvalueNumber': 0}), [0, 1, 2],  'mean',  wp1, 'pixel'), 
	HG2 = gf.GeneralFeature(op.IlastikHessianOfGaussianEigenvalues({'scale':sigma, 'eigenvalueNumber': 1}), [0, 1, 2],  'mean',  wp1, 'pixel')

	pixel_features_list.append(GS)
	pixel_features_list.append(LoG)
	pixel_features_list.append(GGM)
	pixel_features_list.append(DoG)
	pixel_features_list.append(ST1)
	pixel_features_list.append(ST2)
	pixel_features_list.append(HG1)
	pixel_features_list.append(HG2)

pdb.set_trace()
###--------###--------###--------###--------###--------###--------###--------
##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## Classifier:
out_of_bag_score = False  # permet de calculer une erreur d'apprentissage, mais coute cher en temps de calcul
myforest = ens.RandomForestClassifier(n_estimators=100, criterion='gini', min_samples_leaf = 100, max_features='auto', bootstrap=True, n_jobs=4, random_state=42, oob_score=out_of_bag_score)
#myforest = ens.RandomForestClassifier(n_estimators=100, criterion='gini', max_features='auto', bootstrap=True, n_jobs=4, random_state=42, oob_score=out_of_bag_score)

##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
